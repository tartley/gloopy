
Next
----

* Bid's spherical vertex distributor

* add pgup/pgdown vary camera orbit radius

* Add all good shapes from previous programs
* the regular solids

* close-packed cube patterns, specified as tuple ordinates, eliminating
  faces of cubes which abut.
* Tetris shapes
* Cube cluster generated from pixels of small bitmaps. Invader! Mario! etc.

* 2D poly extruder
* 2D poly into ring

* polyhedra face-extruder
* polyhedra bevel
* apply bevel multiple times


Talk Outline
------------

   1. Inspirations - Effective non-photo-realistic work in gaming, movies and
      the demo scene. (1m)
   2. A convenient & Pythonic way to model 3D polyhedra, and some neat
      generators to convert these into OpenGL arrays at runtime. (7m)
   3. Composition of polyhedra to create more complex shapes. (3m)
   4. The resulting performance characteristics: What works well from Python,
      and what doesn't. (2m)
   5. Koch tetrahedron & tetrix, aka Sierpinski tetrahedron. (1m)
   6. Surprisingly effective 3D models created from small bitmaps. (1m)
   7. Automatic generation of trees, mazes, complex spaces. (3m)
   8. Algorithmic modification of existing shapes, such as bevels, geometric
      duals, and polyhedron stellation. (2m)
   9. Shapes that morph: Rearranging vertices on the fly (5m)
  10. Questions (5m)


Infrastructure
--------------

* Python 3
* pyglet latest from hg

* log file should be created in app_root if possible, or else in
  application's scratch space, not cwd

* Convert options to use argparse, so that it can provide command line usage
* command-line option to select screen resolution on startup
* restore desktop resolution on exit
* keys or something to select new screen resolution during runtime
* persist options to store user's chosen screen resolution


* should be pip installable, and doing so should install its deps
* examples should be installed into site-packages
* Check that examples work in isolation, using an installed version of gloopy
* source install should be 'install python; pip install gloopy'
* generate sphinx documentation
* fill in doc strings
* make 0.1 release on cheese shop


OpenGL 3
--------

* VBO the index array
  Can this go into same vertex array object?

* instead of setting modelview using glMultMatrix, we should be passing in
  object matrix (or position, orientation) using vertex shader uniforms.
  Review Mike's 'canonical opengl3 application', from his old pycon talk.
  try OpenGL.FORWARD_COMPATIBLE_ONLY = True
  see http://pyopengl.sourceforge.net/documentation/deprecations.html
  Does this still work ok on opengl 2.1?
  Does this affect performance?
  Same for projection matrix?


Startup Performance
-------------------

* Startup: Replace the (* seq) operator on initialising gl_array in Glyph.
  Instead use:
    array = arraytype()
    array[:] = seq # eg. [11, 22, 33... ]

* Combining the orientations of nested multishapes is done in an innefficient
  manner, multiplying every vertex by each multishape's orientation in
  series. Modify to calculate the cumulative orientation first, then
  multiply each vertex by the result.

* totally rewrite shape_to_glyph algorithm, incorporating what Glyph then
  subsequently does with the outputs. Suspect we're
  doing too much work (e.g. vertex and index re-ordering)

- check a profiler


Render Performance
------------------

* split performance demo into a) performance and b) twister

- create a matrix object which combines all the methods of Vector
  and orientation and which outputs a matrix which can be fed directly to
  shader 'modelview' uniform
    - read this guy's Cython-howto tutorial:
      https://github.com/ricardodelnero/small-Cython-How-To
- Cython the render loop

* Pass an array of gameitem positions & orientations directly to the shaders,
  perhaps as a float texture. Add an integer vertex attribute to say which
  gameitem the vertex belongs to (i.e. an index into the image array.) There
  is then no need to update modelview between draw calls. Do the same with
  orientation, and then all objects could be drawn with a single glDraw call.
OR
* try an entirely CPU based solution. Calc vertex array positions using Cython
  accel arithmetic, then render all using single glDraw.


Design
------

* render should maybe specialise as 'RenderGlyphs' - take list of glyphs,
  positions, orientations (or glyphs, matrices) instead of needing access to
  world or items?
* consider eliminating class Gloopy. Expose world, camera, etc to user.
  Functionality provided by gloopy becomes the canonical demo script.
* eventloop in top level package?
* render? world? camera? what else?
* Also, euclid contains Matrix.new_look_at - could this replace some of
  current camera or projection code?
* Review whether gloopy should be broken into separate libraries:
    - rendering: should know nothing of shapes or world.
        passed a list of (glyph, pos&orientation)
    - shape: polyhedra to glyphs
    - eventloop. Ties it together by:
        -scheduling calls to world.update
        -scheduling calls to render.draw
        -creating iterator over world.items.glyphs (etc) to pass
         to render.draw
    - shaders (compiling, linking, binding, and provided shaders)
* user should (can?) provide a world update function?
* Orbit, Newtonion should maybe act functionally, return a new value 
  instead of attempting to set one? Then update() (or world.update)
  becomes:
    position = self.move()
* newtonian movement should be provided as a public callable to either:
    - be called for one item, AS its update method
    - be called for one item, FROM its update method.
    - be called for all items, from world.update


Rendering
---------

* Curved surfaces: Expressed in shape as a collection of faces. Verts for all
  faces within the collection are shared, not duplicated from one face to the
  next, and normals for each vertex are interpolated between surface normal for
  each adjacent participating face. Assume colors are fixed across the whole
  surface?

* better shaders: incorporate the lighting shaders from pyopengl tutorials,
  and provide a class which binds named uniforms to instance attributes
  or somesuch. Does pyopengl already have such a class?
* Control over ambient and directional light sources, as uniforms
* Point light source(s) - pass in locations, colors, as uniforms
* per pixel lighting so that specular highlights in middle of flat faces
  look good
* Textures. See:
    http://www.lighthouse3d.com/opengl/glsl/index.php?textureComb

* Allow each gameitem to specify its own shader program

* scale movement by mean dt over last few frames to reduce jittery movement
  caused by isolated slow or fast frames.

* anti-alias. Use multisampling. Expose as option to application.


Animation
---------

* Add uniform to tween between two models
* use tweening to animate creation of a bevel
* use tweening to animate forming a polyhedra's dual

* Add to geometry while it is being displayed
    * recreate it from scratch? Or modify (& grow) existing vertex array?
    * colors too
    * Squaresnake


DEMOS

* add demo which creates large and funky shapes
* demo attaching point light source to position of gameitem
* User-controlled camera. Add to a demo.
* Lego - select a face with mouse, add a poly to it.
  (or extrude from it?)
* Interpenetrating cuboid solids and voids. (& rooms, a void in a solid)
* Check out the lit up night sky behind these dark buildings.
  Can we make something like this?
    http://www.openbusiness.cc/wp-content/uploads/hk1.jpg


IDEAS FOR LATER

* Fake skybox geometry:
    * vector:
        * triangular stars
        * a ground, with mountains! and moon
        * animate: sky changes color, moon moves
        * A sun! * moon has rings!
    * a real bitmap skybox thing
    * stack skyboxes, so that bitmap background has ground & mountains
      overlaid. Or sky background has ground overlaid.
    * (if bitmaps can contain alpha, then they can usefully overlay too.
      eg. big planet from UT skyboxes)

* In game text:
    for HUD
    for MENUS, instructions
    as bitmaps on shapes
* Allow items to toggle between being mobile (with a position)
  and 'static', which draws them as part of the 'world' render call
* triangulation for convex faces
* shadows
* Introduce a variable to control the use of primitives other than
  GL_TRIANGLES. When using GL_TRIANGLE_FAN or _STRIP, draw all the
  discontinuous faces of a single shape in a single draw call, using:
    glEnable( GL_PRIMITIVE_RESTART )
    glPrimitiveRestartIndex( MAXINT ) # for eg
  and then insert indices of value MAXINT into the index array to form a
  break between strips. Bear in mind this is meant to be a space & time
  optimisation, so measure the latter before deciding the keep it.
* Curved surfaces (i.e. re-use same vertex (incl. normals) between adjacent
  triangles):
    * Cylinder * sphere * Ring (hollow cylinder) * donut * ring with crosses
* Generate equipotential surfaces in scalar fields
* Use that to generate cool organic shapes with holes,
  eg. see screenshots on the geexlab website
* Noise shaders
* Geometry instancing, see techniques enumerated here:
  http://www.geeks3d.com/20100629/test-opengl-geometry-instancing-geforce-gtx-480-vs-radeon-hd-5870/
* Try enabling gamma correction using: glEnable(GL_FRAMEBUFFER_SRGB)
  This can make a huge difference to the results of lighting
* 2D mode, with ortho projection and 2D verts
* orbit should have an option to face in particular direction during orbit,
  i.e. in direction of motion, or toward rotated body. Presumably expressing
  this as a Q relative to direction of motion makes sense.
* assigning orbit should not move the object discontinuously, but should
  smoothly interpolate from initial position
  (interpolate not quite right - might result in reversal of direction
  towards the end. How to generate a feasible-looking orbital insertion?)
* how to generalise the above for all movers?


DONE

* delete bits of pyweek11 game that aren't required by gloopy,
* move required bits of pyweek11 specific functionality out to demo.py
* presumably glooby, as a library, should not have a main.py
* move stuff out of demo.py into new gloopy.init()
* creation of cube and a non-default sky color should be done by demo.py
* Named colors: use the xkcd database, as staticmethods on Color
* Eventloop knows about many unrelated things
* Log the version number of gloopy
* Log opengl info
* Log options
* Gameitem orientations
* Gameitem spinners
* Gameitem movement
* measure performance - doesn't look like we're getting 60fps
* camera in wobblyorbit
* changes to euclid: Are there tests to guaruantee behaviour is preserved? Y.
* camera should not be attribute of eventloop.
* make sure all access to pyeuclid is using the local copy.
* any_orthogonal has a bug if given vector is negative y axis.
    Should set friend as:
    'x_axis if abs(x) < abs(y) or abs(x) < abs(z)) else y_axis
* current diffs cause slowdown because of __setattr__ on gameitem. (measure
  to confirm this) Fix might be to explicitly pass 'item' to item.update,
  in world.update, so that orbits, etc would no longer need to have their
  own reference to their parent gameitem.
* orbit center should accept either a location or a gameitem.

* try using pyopengl bindings with pyopengl-accelerate added
  (10%, ie 2fps. meh)
* add pyopengl performance fixes (no bloody difference.)
* figure out difference between pyglet.gl and pyglet.gl.gl 
  (former includes glu, glext_arb, etc)
* make it easy to switch between pyglet.gl and pyopengl (bool in util.gl)

* f12 to toggle fps
* alt-enter to toggle fullscreen

* code from old europython talk does 450 independant cubes at 60fps.
  we can only do 100. wtf? Reason is the code in middle of render loop
  which handles position and orientations. Every frame it was creating new
  euclid.Matrix, offsetting it, rotating it, and worst of all, then ctypesing
  it to pass to glMatrixMult.
* repeatable performance test one or more new demo.py scripts:
    512 cube shaped gameitems, unique positions, unique glyphs, FPS:
     23: no orientations
     19: no orientations, newtonian update, with acc, with vel
     16: with orientations
     12: with orientations, newtonian update, with acc, with vel, with ang_vel
* Review TODO doc from 'flyinghigh opengl from python' talk
* Review TODO doc from 'pyweek11'
- position as vector
* revert quaternions to better API and more understandable implementation using
  3-axis
- pass glMultMatrix a matrix constructed from position and orientation
* remove utils.gl. Modules should just use OpenGL.GL or pyglet.gl as they
  please
* create 'pyls' script to aid refactoring
* combine vertex, color, normals into single interleaved array,
* switch from vertex arrays to VBO objects
* move from using glVertexPointer, glColorPointer, glNormalPointer to using
  glVertexAttributePointer
* use vertex array object to reduce number of bind calls needed in inner
  render loop.
* Can binding the VBO itself go into the vertex array object? Y.
* use pyopengl shader management instead of our own compile/link code.
  Or improve our own shader management code to take uniforms, see:
    http://swiftcoder.wordpress.com/2008/12/19/simple-glsl-wrapper-for-pyglet/
* color in top level package
* add an example which allows browsing of a bestiary

